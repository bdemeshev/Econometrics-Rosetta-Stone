# Коан об инcтрументах для простой регрессии {#instruments}
---
<style>
pre.r {
    background-color: #FEF9E7 !important;
}
pre.stata {
    background-color: #BDBDBD !important;
}
pre.python {
    background-color: #FDF2E9 !important;
}
</style> 

> Инструментальные переменные решают проблему эндогенности регрессоров. Так как эндогенность приводит к смещенности и несостоятельности МНК-оценок, коэффициенты регрессоров являются неточными. Вводя в анализ инструментальные переменные, коррелирующие с регрессором, эндогенность часто удается устранить.


Рассмотрим, как метод инструментальных переменных реализуется на r, python и в stata.

## r
```{r stata_py_setup, include=FALSE}
library(knitr) # комбинирование кода и текста
library(Statamarkdown) # взаимодействие со статой
library(reticulate) # взаимодействие с питоном

if (Sys.getenv("USER") == "boris") {
  stataexe <- find_stata()
}

if (Sys.getenv("USERNAME") == "Yuliya") {
  use_python("/Users/Юлия/AppData/Local/Programs/Python/Python37/python.exe")
  stataexe <- find_stata()
}

if (Sys.getenv("USER") == "Sasha") {
  use_python('/Users/Sasha/anaconda3/bin/python3')
  stataexe = "/Applications/Stata/StataSE.app/Contents/MacOS/stataSE"
}


if (Sys.getenv("USERNAME") == "Anastasia Karpova") {
  Sys.setenv(language = "russian")

  Sys.setenv(PATH = paste("C:/Users/DNS/Anaconda3/Library/bin",
                       Sys.getenv()["PATH"], sep = ";"))
  Sys.setenv(PATH = paste("C:/Users/DNS/Anaconda3/Scripts",
                       Sys.getenv()["PATH"], sep = ";"))
  Sys.setenv(PATH = paste("C:/Users/DNS/Anaconda3/",
                       Sys.getenv()["PATH"], sep = ";"))

  use_condaenv("base")
  use_python("C:/Users/DNS/Anaconda3/python.exe")
  pandas = reticulate::import("pandas")
  stataexe = "C:/Program Files (x86)/Stata13/StataMP-64.exe"
}

if (Sys.getenv("USERNAME") == "The_sun") {
  use_python("Users/The_sun/Anaconda3/python.exe")
  stataexe = "C:/Program Files (x86)/Stata13/StataMP-64.exe"
}


knitr::opts_chunk$set(engine.path = list(stata = stataexe), collectcode = TRUE)
```
Загружаем нужные пакеты:
```{r, warning=FALSE, message=FALSE}
library(ggplot2) # Для построения графиков
library(gridExtra) # Для визуализации
library(dplyr) # Для работы с данными
library(skimr) # Для изучения данных
library(Ecdat) #  Для работы с IV
library(AER) #  Для работы с IV
library(ggcorrplot) # Для построения коррелограмы. Для установки: devtools::install_github("kassambara/ggcorrplot")
```
Загружаем данные по продаже недвижимости **Housing**, изучаем их строение, визуализируем:
```{r, warning=FALSE, message=FALSE}
skim(Housing)
theme_set(theme_classic())

ggplot(data = Housing) + 
  scale_fill_brewer(palette = "Spectral") + 
  geom_histogram(mapping = aes(x = price), color = "gray2") +
  labs(title = "Распределение цены", y = "Количество наблюдений", x = "Цена дома (в $)")  

ggplot(data = Housing) + 
  scale_fill_brewer(palette = "Spectral") + 
  geom_histogram(mapping = aes(x = bedrooms), fill = "tomato1") +
  labs(title = "Распределение количества кроватей", y = "Количество наблюдений", 
  x = "Количество кроватей")  

ggplot(data = Housing) + 
  scale_fill_brewer(palette = "Spectral") + 
  geom_histogram(mapping = aes(x = lotsize), fill = "#FFDB6D", color = "#C4961A") +
  labs(title = "Распределение размера дома", y = "Количество наблюдений", 
  x = "Размер дома (в квадратных метрах)") 
 
```

Используем для предсказания цены дома `price` количество кроватей в нем `bedrooms`, а  площадь дома `lotsize` будем использовать как инструмент.

Убедимся, что между ними есть связь, посчитав корреляцию. Заодно построим нехитрую корреляционную матрицу для всех численных переменных:
```{r, include=TRUE}
cor(Housing$lotsize, Housing$bedrooms) # Считаем связь между переменной и инструментом
housing_numeric = select_if(Housing, is.numeric) # Оставляем только численные переменные
cor_housing = cor(housing_numeric)
ggcorrplot(cor_housing, hc.order = TRUE,
           type = "lower",
           lab = TRUE,
           lab_size = 3,
           method = "circle",
           colors = c("tomato2", "white", "springgreen3"),
           title = "Корреляция переменных",
           ggtheme = theme_bw)
```

Действительно, между выбранными нами переменной и инструментом наблюдается корреляция, которая составляет 0.15.

Построим IV-регрессию, реализующую двухшаговый МНК, с помощью функции *ivreg*:
```{r, include=TRUE}
iv1 = ivreg(price ~ bedrooms | lotsize, data = Housing)
summary(iv1)
```
Обратите внимание на синтаксис функции - он схож с простой регрессией. Первая переменная - зависимая, после знака `~` указываются регрессоры. После вертикальной черты `|` указываются инструментальные переменные. В поле *data* мы ссылаемся на данные, которые анализируем.

Мы видим, что влияние размера дома на цену значительно снизилось после использования инструментальной переменной. Значит, размер дома и количество кроватей в нем тесно связаны.

Чтобы полностью в этом убедиться, проведем тесты.
```{r, include=TRUE}
summary(iv1, vcov = sandwich, diagnostics = TRUE)
```
Смотрим на раздел *Diagnostic tests*. Нас интересует тест на слабость инструментов, *Weak instruments*. Нулевая гипотеза заключается в том, что выбранный инструмент слабый. На любом разумном уровне значимости мы можем говорить о том, что гипотеза отвергается, а значит, выбранный инструмент неслабый. Следующий тест, *Wu-Hausman*, проверяет основную гипотезу о постоянстве МНК-оценок. Так как мы отвергаем основную гипотезу на любом разумном уровне значимости, оценки МНК не постоянны, то есть, присутствует эндогенность и МНК-оценки смещены, поэтому использование инструментов оправданно. *Тест Sargan*, проверяющий экзогенность инструментов, может применяться только в том случае, если количество инструментов превышает количество эндогенных переменных. В нашем случае данный тест не применим, так как мы выбрали только одну инструментальную переменную для одного регрессора. 

Добавим еще одну инструментальную переменную, `bathrms`, содержащую информацию о количестве ванных комнат, и проведем *тест Sargan*.
```{r, include=TRUE}
iv2 = ivreg(price ~ bedrooms | lotsize + bathrms, data = Housing)
summary(iv2)
summary(iv2, vcov = sandwich, diagnostics = TRUE)
```
Нулевая гипотеза в *тесте Sargan* отвергается тогда, когда хотя бы один из инструментов не подходит. Так как нулевая гипотеза не отвергается на любом разумном уровне значимости, наши инструменты были подобраны хорошо.

## stata
Будем работать с набором данных, содержащих информацию о зарплатах. Загрузим данные, посмотрим их строение.
```{stata}
webuse educwages
describe
```
Проведем двухшаговый МНК с помощью функции *ivregress*. В качестве зависимой переменной djpmмем зарплату (`wages`), в качестве регрессора - образование (`education`). В качестве инструментов для образования используем образование отца (`feducation`), образование матери (`meducation`) и участие в профсоюзе (`union`).
```{stata}
ivregress 2sls wages union (education = meducation feducation) 
```
Проведем тесты на качество подбора инструментов.
```{stata}
estat endog
```
Основная гипотеза об экзогенности отвергается, что означает, что выбранные инструменты эндогенны. *Тест Durbin* и *тест Wu-Hausman* также показывают, что выбранные инструменты подходят.

Проведем *тесты Sargan и Basmann*.
```{stata}
estat overid
```
Нулевая гипотеза в *тесте Sargan* и *тесте Basmann на сверхидентифицирующие ограничения* отвергается тогда, когда хотя бы один из инструментов не подходит. Так как нулевая гипотеза не отвергается на любом разумном уровне значимости, наши инструменты были подобраны хорошо.

## python

Разберем применение метода инструментальных переменных на python.
Загружаем необходимые библиотеки:
```{python}
import pandas as pd # Библиотека pandas для работы с данными
import seaborn as sns # Библиотека seaborn для визуализации
import matplotlib.pyplot as plt # Библиотека matplotlib для визуализации
import statsmodels.api as sm # Для двухшагового МНК
```
Загружаем данные и исследуем их строение:
```{python}
url = "https://raw.githubusercontent.com/arunk13/MSDA-Assignments/master/IS607Fall2015/Assignment3/student-mat.csv"
df = pd.read_csv(url, 
                header=0,
                sep = ";") 
print(df.head(2))
```
Изучим зависимость успеваемости ученика `G3` от времени, которое он тратит на учебу `studytime` и его свободного времени `freetime`, а в качестве инструмента для свободного времени используем `traveltime`, время, которое он тратит на поездку до учебы. Логика здесь такая: чем больше времени ученик тратит на дорогу, тем меньше у него времени остается на учебу, а значит, меньше вероятность получить хорошую оценку. Преобразуем выбранные переменные:
```{python}
grade = df.loc[:, 'G3']
freetime = df.loc[:, 'freetime']
traveltime = df.loc[:, 'traveltime']
studtytime = df.loc[:, 'studytime']
```

Проверим корреляцию переменной `freetime` и подобранного инструмента `traveltime`, построив диаграмму корреляции всех признаков:
```{python}
colormap = plt.cm.viridis 
corr = df.corr()
plt.figure(figsize=(12,12))
plt.title('Корреляционная матрица признаков', y=1.02, size=15)
sns.heatmap(corr,linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)
```

Корреляция между переменными составляет 0.1, а корреляция инструмента с целевой переменной -0.12, что, в принципе, нас вполне устраивает.

Проведем двухшаговый МНК при помощи функции IV2SLS из пакета **linearmodels**. Чтобы использовать ее, надо установить пакет **linearmodels**. Для этого, если он еще не установлен, нужно выполнить следующую команду в командной строке: `pip install linearmodels`. Убедившись, что она установлена, импортируем нужные библиотеки и приступаем к двухшаговому МНК:
```{python}
from linearmodels import IV2SLS
ivmod = IV2SLS.from_formula('grade ~ 1 + studytime  + [freetime ~ traveltime]', df)
res_2sls = ivmod.fit()
print(res_2sls.summary)
```
Проверим качество подбора инструментов с помощью тестов.
*Durbin тест*:
```{python}
res_2sls.durbin()
```
*Wu-Hausman тест*:
```{python}
res_2sls.wu_hausman()
```
Основная гипотеза об экзогенности инструментов в обоих тестах отвергается, значит, мы выбрали подходящие инструменты.